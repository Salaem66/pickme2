#!/usr/bin/env python3
"""
Mapping √©motionnel intelligent pour VibeFilms
D√©tecte les √©motions dans les requ√™tes et boost les genres correspondants
"""

import re
from typing import Dict, List, Tuple, Optional

class EmotionMapper:
    def __init__(self):
        # Mapping √©motions -> genres avec coefficients de boost
        self.emotion_mappings = {
            # RIRE / HUMOUR / COM√âDIE
            "rire": {
                "keywords": ["rire"],  # SIMPLE : D√àS QU'IL Y A "RIRE" ‚Üí BOOST COM√âDIE
                "phrases": [],
                "target_genres": {"Com√©die": 8.0, "Familial": 4.0, "Animation": 3.0},
                "boost_keywords": ["dr√¥le", "amusant", "hilarant", "comique", "rigolo", "marrant", "gag", "humour"]
            },
            
            # PEUR / HORREUR / ANGOISSE
            "peur": {
                "keywords": ["peur"],  # SIMPLE : D√àS QU'IL Y A "PEUR" ‚Üí BOOST HORREUR
                "phrases": [],  # TOUTES LES PHRASES CONTENANT "PEUR" SONT D√âTECT√âES
                "target_genres": {"Horreur": 10.0},  # BOOST ULTRA-AGRESSIF - HORREUR UNIQUEMENT
                "boost_keywords": ["horreur", "√©pouvante", "effrayant", "terrifiant", "gore", "cauchemar", "zombie", "fant√¥me"]
            },
            
            # TRISTESSE / √âMOTION / DRAME
            "tristesse": {
                "keywords": ["triste"],  # SIMPLE : D√àS QU'IL Y A "TRISTE" ‚Üí BOOST DRAME
                "phrases": [],
                "target_genres": {"Drame": 8.0, "Romance": 4.0},
                "boost_keywords": ["√©mouvant", "bouleversant", "touchant", "poignant", "m√©lancolique", "nostalgique"]
            },
            
            # ROMANCE / AMOUR / TENDRESSE
            "amour": {
                "keywords": ["amour"],  # SIMPLE : D√àS QU'IL Y A "AMOUR" ‚Üí BOOST ROMANCE
                "phrases": [],
                "target_genres": {"Romance": 8.0, "Drame": 4.0, "Com√©die": 3.0},
                "boost_keywords": ["romantique", "passionn√©", "tendre", "sensuel", "couple", "mariage", "baiser"]
            },
            
            # ACTION / ADR√âNALINE / EXCITATION
            "action": {
                "keywords": ["action"],  # SIMPLE : D√àS QU'IL Y A "ACTION" ‚Üí BOOST ACTION
                "phrases": [],
                "target_genres": {"Action": 8.0, "Thriller": 4.0, "Aventure": 3.0},
                "boost_keywords": ["intense", "explosif", "rapide", "combat", "poursuite", "bagarre", "spectaculaire"]
            },
            
            # FAMILLE / ENFANTS / INNOCENCE
            "famille": {
                "keywords": ["famille"],  # SIMPLE : D√àS QU'IL Y A "FAMILLE" ‚Üí BOOST FAMILIAL
                "phrases": [],
                "target_genres": {"Familial": 8.0, "Animation": 6.0, "Com√©die": 4.0},
                "boost_keywords": ["familial", "enfant", "mignon", "innocent", "√©ducatif", "bienveillant"]
            },
            
            # SCIENCE-FICTION / FUTUR / TECHNOLOGIE
            "futur": {
                "keywords": ["futur"],  # SIMPLE : D√àS QU'IL Y A "FUTUR" ‚Üí BOOST SF
                "phrases": [],
                "target_genres": {"Science-Fiction": 8.0, "Action": 4.0},
                "boost_keywords": ["futuriste", "technologique", "spatial", "alien", "robot", "cyberpunk"]
            },
            
            # MYST√àRE / SUSPENSE / ENQU√äTE
            "mystere": {
                "keywords": ["myst√®re"],  # SIMPLE : D√àS QU'IL Y A "MYST√àRE" ‚Üí BOOST MYST√àRE
                "phrases": [],
                "target_genres": {"Myst√®re": 8.0, "Thriller": 6.0, "Crime": 4.0},
                "boost_keywords": ["myst√©rieux", "√©nigmatique", "secret", "investigation", "d√©tective", "r√©v√©lation"]
            }
        }
    
    def detect_emotions(self, query: str) -> List[Tuple[str, float]]:
        """D√©tecte les √©motions dans une requ√™te et retourne les genres √† booster"""
        query_lower = query.lower()
        detected_emotions = []
        
        for emotion, config in self.emotion_mappings.items():
            emotion_score = 0.0
            
            # V√©rifier les phrases exactes (score max)
            for phrase in config["phrases"]:
                if phrase.lower() in query_lower:
                    emotion_score = max(emotion_score, 1.0)
                    break
            
            # V√©rifier les mots-cl√©s (score mod√©r√©)
            if emotion_score < 1.0:
                for keyword in config["keywords"]:
                    if keyword.lower() in query_lower:
                        emotion_score = max(emotion_score, 0.7)
            
            # V√©rifier les mots de boost (score faible)
            if emotion_score < 0.7:
                for boost_word in config["boost_keywords"]:
                    if boost_word.lower() in query_lower:
                        emotion_score = max(emotion_score, 0.4)
            
            if emotion_score > 0:
                detected_emotions.append((emotion, emotion_score))
        
        # Trier par score d√©croissant
        detected_emotions.sort(key=lambda x: x[1], reverse=True)
        return detected_emotions
    
    def enhance_query(self, query: str) -> str:
        """Am√©liore la requ√™te en ajoutant des mots-cl√©s contextuels"""
        detected_emotions = self.detect_emotions(query)
        
        if not detected_emotions:
            return query
        
        # Prendre l'√©motion la plus forte
        top_emotion, score = detected_emotions[0]
        config = self.emotion_mappings[top_emotion]
        
        # Ajouter des mots-cl√©s de boost selon le score
        enhanced_query = query
        
        if score >= 0.7:  # √âmotion forte d√©tect√©e
            # Ajouter les mots-cl√©s de genre principaux
            top_genres = sorted(config["target_genres"].items(), key=lambda x: x[1], reverse=True)[:2]
            for genre, _ in top_genres:
                enhanced_query += f" {genre.lower()}"
            
            # Ajouter quelques mots-cl√©s de boost
            boost_words = config["boost_keywords"][:3]
            for word in boost_words:
                enhanced_query += f" {word}"
        
        return enhanced_query
    
    def get_genre_boosts(self, query: str) -> Dict[str, float]:
        """Retourne les coefficients de boost par genre pour une requ√™te"""
        detected_emotions = self.detect_emotions(query)
        genre_boosts = {}
        
        for emotion, emotion_score in detected_emotions:
            config = self.emotion_mappings[emotion]
            
            for genre, base_boost in config["target_genres"].items():
                # Ajuster le boost selon la force de d√©tection de l'√©motion
                adjusted_boost = base_boost * emotion_score
                
                # Cumuler les boosts si plusieurs √©motions ciblent le m√™me genre
                if genre in genre_boosts:
                    genre_boosts[genre] = max(genre_boosts[genre], adjusted_boost)
                else:
                    genre_boosts[genre] = adjusted_boost
        
        return genre_boosts
    
    def explain_detection(self, query: str) -> str:
        """Explique la d√©tection d'√©motion pour debug"""
        detected_emotions = self.detect_emotions(query)
        genre_boosts = self.get_genre_boosts(query)
        enhanced_query = self.enhance_query(query)
        
        explanation = f"üîç Analyse de: '{query}'\n"
        
        if detected_emotions:
            explanation += f"üìä √âmotions d√©tect√©es:\n"
            for emotion, score in detected_emotions:
                explanation += f"  ‚Ä¢ {emotion}: {score:.2f}\n"
            
            explanation += f"üé¨ Boost de genres:\n"
            for genre, boost in sorted(genre_boosts.items(), key=lambda x: x[1], reverse=True):
                explanation += f"  ‚Ä¢ {genre}: x{boost:.1f}\n"
            
            explanation += f"‚ú® Requ√™te am√©lior√©e: '{enhanced_query}'\n"
        else:
            explanation += "‚ùå Aucune √©motion d√©tect√©e\n"
        
        return explanation

# Instance globale
emotion_mapper = EmotionMapper()

def test_emotion_mapping():
    """Test du syst√®me de mapping √©motionnel"""
    test_queries = [
        "j'ai envie de rire",
        "j'ai envie d'avoir peur", 
        "je me sens triste",
        "je veux de la romance",
        "action et adr√©naline",
        "film pour famille",
        "science-fiction et futur",
        "myst√®re et suspense"
    ]
    
    print("üé≠ Test du mapping √©motionnel")
    print("=" * 50)
    
    for query in test_queries:
        print(emotion_mapper.explain_detection(query))
        print("-" * 30)

if __name__ == "__main__":
    test_emotion_mapping()